{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-annotation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const updateChartSize = useCallback(() => {\n    if (chartRef && chartRef.current) {\n      const parentWidth = chartRef.current.parentElement.clientWidth;\n      chartRef.current.width = parentWidth;\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.resize();\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))];\n      const datasets = countries.map((country, index) => {\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country.value === country).map(item => ({\n            x: item.date,\n            y: item.value\n          })),\n          borderColor: color,\n          borderWidth: 1,\n          fill: false,\n          pointStyle: 'circle',\n          pointRadius: 2,\n          pointBorderColor: color\n        };\n      });\n      const minYear = Math.min(...data.map(item => item.date));\n      const maxYear = Math.max(...data.map(item => item.date));\n      const populationValues = data.map(item => item.value);\n      const minPopulation = Math.min(...populationValues);\n      const maxPopulation = Math.max(...populationValues);\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          animationEnabled: true,\n          zoomEnabled: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              max: maxYear,\n              beginAtZero: true\n            },\n            y: {\n              type: 'linear',\n              min: minPopulation - minPopulation / 5,\n              max: maxPopulation,\n              beginAtZero: true\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data]);\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.options.onClick = (event, elements) => {\n        if (elements.length > 0) {\n          const year = chartInstanceRef.current.data.labels[elements[0].index];\n          setSelectedYear(year);\n        }\n      };\n    }\n  }, []);\n  useEffect(() => {\n    if (selectedYear) {\n      const countries = [...new Set(data.map(item => item.country.value))];\n      const annotations = countries.map((country, index) => ({\n        type: 'line',\n        mode: 'vertical',\n        scaleID: 'x',\n        value: selectedYear,\n        borderColor: datasets[index].borderColor,\n        borderWidth: 1,\n        label: {\n          content: `${country}: ${getPopulationForYear(country, selectedYear)}`,\n          enabled: true,\n          position: 'top'\n        }\n      }));\n      chartInstanceRef.current.options.plugins.annotation = {\n        annotations\n      };\n      chartInstanceRef.current.update();\n    }\n  }, [selectedYear]);\n  const getPopulationForYear = (country, year) => {\n    const countryData = data.filter(item => item.country.value === country);\n    const yearData = countryData.find(item => item.date === year);\n    return yearData ? yearData.value : 'N/A';\n  };\n  useEffect(() => {\n    window.addEventListener('resize', updateChartSize);\n    return () => {\n      window.removeEventListener('resize', updateChartSize);\n    };\n  }, [updateChartSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [selectedYear && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Selected Year: \", selectedYear]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"UvPzcM4UWePvVSImLaryuwiXM28=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","selectedYear","setSelectedYear","updateChartSize","current","parentWidth","parentElement","clientWidth","width","resize","destroy","ctx","getContext","countries","Set","map","item","country","value","datasets","index","color","Math","random","label","filter","x","date","y","borderColor","borderWidth","fill","pointStyle","pointRadius","pointBorderColor","minYear","min","maxYear","max","populationValues","minPopulation","maxPopulation","newChartInstance","type","labels","options","responsive","animationEnabled","zoomEnabled","scales","beginAtZero","onClick","event","elements","length","year","annotations","mode","scaleID","content","getPopulationForYear","enabled","position","plugins","annotation","update","countryData","yearData","find","window","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-annotation';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  const [selectedYear, setSelectedYear] = useState(null);\r\n\r\n  const updateChartSize = useCallback(() => {\r\n    if (chartRef && chartRef.current) {\r\n      const parentWidth = chartRef.current.parentElement.clientWidth;\r\n      chartRef.current.width = parentWidth;\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.resize();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))];\r\n      const datasets = countries.map((country, index) => {\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country.value === country)\r\n            .map((item) => ({\r\n              x: item.date,\r\n              y: item.value,\r\n            })),\r\n          borderColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n          pointStyle: 'circle',\r\n          pointRadius: 2,\r\n          pointBorderColor: color,\r\n        };\r\n      });\r\n\r\n      const minYear = Math.min(...data.map((item) => item.date));\r\n      const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n      const populationValues = data.map((item) => item.value);\r\n      const minPopulation = Math.min(...populationValues);\r\n      const maxPopulation = Math.max(...populationValues);\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          animationEnabled: true,\r\n          zoomEnabled: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear,\r\n              max: maxYear,\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: minPopulation - minPopulation / 5,\r\n              max: maxPopulation,\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.options.onClick = (event, elements) => {\r\n        if (elements.length > 0) {\r\n          const year = chartInstanceRef.current.data.labels[elements[0].index];\r\n          setSelectedYear(year);\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedYear) {\r\n      const countries = [...new Set(data.map((item) => item.country.value))];\r\n      const annotations = countries.map((country, index) => ({\r\n        type: 'line',\r\n        mode: 'vertical',\r\n        scaleID: 'x',\r\n        value: selectedYear,\r\n        borderColor: datasets[index].borderColor,\r\n        borderWidth: 1,\r\n        label: {\r\n          content: `${country}: ${getPopulationForYear(country, selectedYear)}`,\r\n          enabled: true,\r\n          position: 'top',\r\n        },\r\n      }));\r\n\r\n      chartInstanceRef.current.options.plugins.annotation = {\r\n        annotations,\r\n      };\r\n\r\n      chartInstanceRef.current.update();\r\n    }\r\n  }, [selectedYear]);\r\n\r\n  const getPopulationForYear = (country, year) => {\r\n    const countryData = data.filter((item) => item.country.value === country);\r\n    const yearData = countryData.find((item) => item.date === year);\r\n\r\n    return yearData ? yearData.value : 'N/A';\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateChartSize);\r\n    return () => {\r\n      window.removeEventListener('resize', updateChartSize);\r\n    };\r\n  }, [updateChartSize]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          {selectedYear && (\r\n            <div className=\"text-center\">\r\n              <p>Selected Year: {selectedYear}</p>\r\n            </div>\r\n          )}\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}