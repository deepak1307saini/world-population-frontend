{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-zoom';\nimport 'chartjs-plugin-annotation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const [verticalLineYear, setVerticalLineYear] = useState(1990); // Initial year for the vertical line\n\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\n    }\n\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country values\n\n      const datasets = countries.map((country, index) => {\n        // Generate a unique color for each country\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country.value === country).map(item => ({\n            x: item.date,\n            y: item.value\n          })),\n          borderColor: color,\n          borderWidth: 1,\n          fill: false,\n          pointStyle: 'circle',\n          pointRadius: 2,\n          pointBorderColor: color\n        };\n      });\n\n      // Calculate the min and max year values\n      const minYear = Math.min(...data.map(item => item.date));\n      const maxYear = Math.max(...data.map(item => item.date));\n\n      // Find the minimum and maximum population values in the data\n      const populationValues = data.map(item => item.value);\n      const minPopulation = Math.min(...populationValues);\n      const maxPopulation = Math.max(...populationValues);\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          animationEnabled: true,\n          zoom: {\n            enabled: true,\n            mode: 'xy'\n          },\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              max: maxYear,\n              beginAtZero: true\n            },\n            y: {\n              type: 'linear',\n              min: minPopulation - minPopulation / 5,\n              max: maxPopulation,\n              beginAtZero: true\n            }\n          },\n          annotation: {\n            drawTime: 'afterDatasetsDraw',\n            // Draw the annotation after the datasets\n            annotations: [{\n              type: 'line',\n              mode: 'vertical',\n              scaleID: 'x',\n              value: verticalLineYear,\n              // The year for the vertical line\n              borderColor: 'red',\n              // Color of the line\n              borderWidth: 2,\n              label: {\n                content: 'Vertical Line',\n                enabled: true,\n                position: 'top'\n              }\n            }]\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data, verticalLineYear]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"verticalLineYear\",\n        children: \"Vertical Line Year: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"verticalLineYear\",\n        value: verticalLineYear,\n        onChange: e => setVerticalLineYear(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"561pWkn7RzZpWaaUykhSDdNhYFE=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","verticalLineYear","setVerticalLineYear","current","destroy","ctx","getContext","countries","Set","map","item","country","value","datasets","index","color","Math","random","label","filter","x","date","y","borderColor","borderWidth","fill","pointStyle","pointRadius","pointBorderColor","minYear","min","maxYear","max","populationValues","minPopulation","maxPopulation","newChartInstance","type","labels","options","responsive","animationEnabled","zoom","enabled","mode","scales","beginAtZero","annotation","drawTime","annotations","scaleID","content","position","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","htmlFor","id","onChange","e","parseInt","target","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-zoom';\r\nimport 'chartjs-plugin-annotation';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n  const [verticalLineYear, setVerticalLineYear] = useState(1990); // Initial year for the vertical line\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country values\r\n\r\n      const datasets = countries.map((country, index) => {\r\n        // Generate a unique color for each country\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country.value === country)\r\n            .map((item) => ({\r\n              x: item.date,\r\n              y: item.value,\r\n            })),\r\n          borderColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n          pointStyle: 'circle',\r\n          pointRadius: 2,\r\n          pointBorderColor: color,\r\n        };\r\n      });\r\n\r\n      // Calculate the min and max year values\r\n      const minYear = Math.min(...data.map((item) => item.date));\r\n      const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n      // Find the minimum and maximum population values in the data\r\n      const populationValues = data.map((item) => item.value);\r\n      const minPopulation = Math.min(...populationValues);\r\n      const maxPopulation = Math.max(...populationValues);\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          animationEnabled: true,\r\n          zoom: {\r\n            enabled: true,\r\n            mode: 'xy',\r\n          },\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear,\r\n              max: maxYear,\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: minPopulation - minPopulation / 5,\r\n              max: maxPopulation,\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n          annotation: {\r\n            drawTime: 'afterDatasetsDraw', // Draw the annotation after the datasets\r\n            annotations: [\r\n              {\r\n                type: 'line',\r\n                mode: 'vertical',\r\n                scaleID: 'x',\r\n                value: verticalLineYear, // The year for the vertical line\r\n                borderColor: 'red', // Color of the line\r\n                borderWidth: 2,\r\n                label: {\r\n                  content: 'Vertical Line',\r\n                  enabled: true,\r\n                  position: 'top',\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data, verticalLineYear]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n      <div className=\"text-center mt-3\">\r\n        <label htmlFor=\"verticalLineYear\">Vertical Line Year: </label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"verticalLineYear\"\r\n          value={verticalLineYear}\r\n          onChange={(e) => setVerticalLineYear(parseInt(e.target.value))}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}