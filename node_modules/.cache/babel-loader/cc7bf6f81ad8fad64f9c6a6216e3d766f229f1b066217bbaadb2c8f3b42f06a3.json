{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    // Check if a previous chart instance exists and destroy it\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country values\n\n      const datasets = countries.map((country, index) => {\n        // Generate a unique color for each country\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country.value === country).map(item => ({\n            x: item.date,\n            y: item.value\n          })),\n          borderColor: color,\n          // Assign a unique color to the line\n          borderWidth: 2,\n          fill: false,\n          pointStyle: 'circle',\n          // Display data points as circles\n          pointRadius: 5,\n          // Set the radius of data points\n          pointBackgroundColor: color,\n          // Set the same unique color for data points\n          pointBorderColor: color // Set the same unique color for data point borders\n        };\n      });\n\n      // Calculate the min and max year values\n      const minYear = Math.min(...data.map(item => item.date));\n      const maxYear = Math.max(...data.map(item => item.date));\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        // Use line chart type to connect data points with lines\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              // Set the minimum year\n              max: maxYear,\n              // Set the maximum year\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            zoom: {\n              zoom: {\n                enabled: true,\n                mode: 'x',\n                // Enable x-axis zooming\n                speed: 0.05\n              }\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","current","destroy","ctx","getContext","countries","Set","map","item","country","value","datasets","index","color","Math","random","label","filter","x","date","y","borderColor","borderWidth","fill","pointStyle","pointRadius","pointBackgroundColor","pointBorderColor","minYear","min","maxYear","max","newChartInstance","type","labels","options","responsive","scales","beginAtZero","plugins","zoom","enabled","mode","speed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Check if a previous chart instance exists and destroy it\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country values\r\n\r\n      const datasets = countries.map((country, index) => {\r\n        // Generate a unique color for each country\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country.value === country)\r\n            .map((item) => ({\r\n              x: item.date,\r\n              y: item.value,\r\n            })),\r\n          borderColor: color,                // Assign a unique color to the line\r\n          borderWidth: 2,\r\n          fill: false,\r\n          pointStyle: 'circle',             // Display data points as circles\r\n          pointRadius: 5,                  // Set the radius of data points\r\n          pointBackgroundColor: color,      // Set the same unique color for data points\r\n          pointBorderColor: color,          // Set the same unique color for data point borders\r\n        };\r\n      });\r\n\r\n      // Calculate the min and max year values\r\n      const minYear = Math.min(...data.map((item) => item.date));\r\n      const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line', // Use line chart type to connect data points with lines\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear, // Set the minimum year\r\n              max: maxYear, // Set the maximum year\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n          plugins: {\r\n            zoom: {\r\n              zoom: {\r\n                enabled: true,\r\n                mode: 'x', // Enable x-axis zooming\r\n                speed: 0.05,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}