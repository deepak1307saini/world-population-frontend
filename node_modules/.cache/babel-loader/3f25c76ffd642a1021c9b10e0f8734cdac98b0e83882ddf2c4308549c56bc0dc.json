{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-zoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const updateChartSize = useCallback(() => {\n    if (chartRef && chartRef.current) {\n      const parentWidth = chartRef.current.parentElement.clientWidth;\n\n      // Set the canvas width to match the parent container's width\n      chartRef.current.width = parentWidth;\n\n      // Ensure the chartInstance is available and update its size\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.resize();\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\n    }\n\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country values\n\n      const datasets = countries.map((country, index) => {\n        // Generate a unique color for each country\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country.value === country).map(item => ({\n            x: item.date,\n            y: item.value\n          })),\n          borderColor: color,\n          // Assign a unique color to the line\n          borderWidth: 1,\n          fill: false,\n          pointStyle: 'circle',\n          // Display data points as circles\n          pointRadius: 2,\n          // Set the radius of data points\n          // pointBackgroundColor: color,      // Set the same unique color for data points\n          pointBorderColor: color // Set the same unique color for data point borders\n        };\n      });\n\n      // Calculate the min and max year values\n      const minYear = Math.min(...data.map(item => item.date));\n      const maxYear = Math.max(...data.map(item => item.date));\n\n      // Find the minimum and maximum population values in the data\n      const populationValues = data.map(item => item.value);\n      const minPopulation = Math.min(...populationValues);\n      const maxPopulation = Math.max(...populationValues);\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        // Use line chart type to connect data points with lines\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          animationEnabled: true,\n          zoomEnabled: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              // Set the minimum year\n              max: maxYear,\n              // Set the maximum year\n              beginAtZero: true\n            },\n            y: {\n              type: 'linear',\n              min: minPopulation - minPopulation / 5,\n              // Set the adjusted y-axis minimum\n              max: maxPopulation,\n              // Set the adjusted y-axis maximum\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            zoom: {\n              zoom: {\n                enabled: true,\n                // Enable zooming\n                mode: 'xy' // Allow zooming in both x and y directions\n              },\n\n              pan: {\n                enabled: true,\n                // Enable panning\n                mode: 'xy' // Allow panning in both x and y directions\n              }\n            }\n          }\n        }\n      });\n\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data]);\n  window.addEventListener('resize', updateChartSize);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"7jim5jifX7poFMUtnkJIejiZsf8=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","updateChartSize","current","parentWidth","parentElement","clientWidth","width","resize","destroy","ctx","getContext","countries","Set","map","item","country","value","datasets","index","color","Math","random","label","filter","x","date","y","borderColor","borderWidth","fill","pointStyle","pointRadius","pointBorderColor","minYear","min","maxYear","max","populationValues","minPopulation","maxPopulation","newChartInstance","type","labels","options","responsive","animationEnabled","zoomEnabled","scales","beginAtZero","plugins","zoom","enabled","mode","pan","window","addEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-zoom';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n \r\n  const updateChartSize = useCallback(() => {\r\n    if (chartRef && chartRef.current) {\r\n      const parentWidth = chartRef.current.parentElement.clientWidth;\r\n\r\n      // Set the canvas width to match the parent container's width\r\n      chartRef.current.width = parentWidth;\r\n\r\n      // Ensure the chartInstance is available and update its size\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.resize();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country values\r\n\r\n      const datasets = countries.map((country, index) => {\r\n        // Generate a unique color for each country\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country.value === country)\r\n            .map((item) => ({\r\n              x: item.date,\r\n              y: item.value,\r\n            })),\r\n          borderColor: color,                // Assign a unique color to the line\r\n          borderWidth: 1,\r\n          fill: false,\r\n          pointStyle: 'circle',             // Display data points as circles\r\n          pointRadius: 2,                  // Set the radius of data points\r\n          // pointBackgroundColor: color,      // Set the same unique color for data points\r\n          pointBorderColor: color,          // Set the same unique color for data point borders\r\n        };\r\n      });\r\n\r\n      // Calculate the min and max year values\r\n      const minYear = Math.min(...data.map((item) => item.date));\r\n      const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n      // Find the minimum and maximum population values in the data\r\n      const populationValues = data.map((item) => item.value);\r\n      const minPopulation = Math.min(...populationValues);\r\n      const maxPopulation = Math.max(...populationValues);\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line', // Use line chart type to connect data points with lines\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          animationEnabled: true,\r\n\t\t\t    zoomEnabled: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear, // Set the minimum year\r\n              max: maxYear, // Set the maximum year\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: minPopulation-minPopulation/5, // Set the adjusted y-axis minimum\r\n              max: maxPopulation, // Set the adjusted y-axis maximum\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n          plugins: {\r\n            zoom: {\r\n              zoom: {\r\n                enabled: true, // Enable zooming\r\n                mode: 'xy', // Allow zooming in both x and y directions\r\n              },\r\n              pan: {\r\n                enabled: true, // Enable panning\r\n                mode: 'xy', // Allow panning in both x and y directions\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data]);\r\n\r\n  window.addEventListener('resize', updateChartSize);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}