{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-zoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const [yAxisMin, setYAxisMin] = useState(0);\n  const [yAxisMax, setYAxisMax] = useState(0);\n\n  // Calculate the min and max year values\n  const minYear = Math.min(...data.map(item => item.date));\n  const maxYear = Math.max(...data.map(item => item.date));\n\n  // Find the minimum and maximum population values in the data\n  const populationValues = data.map(item => item.value);\n  const minPopulation = Math.min(...populationValues);\n  const maxPopulation = Math.max(...populationValues);\n\n  // Adjust the y-axis boundaries\n  const yAxisPadding = (maxPopulation - minPopulation) / 10;\n  setYAxisMin(minPopulation - yAxisPadding);\n  setYAxisMax(maxPopulation + yAxisPadding);\n  useEffect(() => {\n    // Check if a previous chart instance exists and destroy it\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country values\n\n      const datasets = countries.map((country, index) => ({\n        label: country,\n        data: data.filter(item => item.country.value === country).map(item => ({\n          x: item.date,\n          y: item.value\n        })),\n        borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`,\n        borderWidth: 2,\n        fill: false\n      }));\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              // Set the minimum year\n              max: maxYear,\n              // Set the maximum year\n              beginAtZero: true\n            },\n            y: {\n              type: 'linear',\n              min: yAxisMin,\n              // Set the adjusted y-axis minimum\n              max: yAxisMax,\n              // Set the adjusted y-axis maximum\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            zoom: {\n              zoom: {\n                enabled: true,\n                mode: 'xy',\n                speed: 0.05\n              }\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"Boxjdk7CV0IUa+SoijeuZLCGKH4=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","yAxisMin","setYAxisMin","yAxisMax","setYAxisMax","minYear","Math","min","map","item","date","maxYear","max","populationValues","value","minPopulation","maxPopulation","yAxisPadding","current","destroy","ctx","getContext","countries","Set","country","datasets","index","label","filter","x","y","borderColor","random","borderWidth","fill","newChartInstance","type","labels","options","responsive","scales","beginAtZero","plugins","zoom","enabled","mode","speed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-zoom';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n  const [yAxisMin, setYAxisMin] = useState(0);\r\n  const [yAxisMax, setYAxisMax] = useState(0);\r\n\r\n    // Calculate the min and max year values\r\n    const minYear = Math.min(...data.map((item) => item.date));\r\n    const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n   // Find the minimum and maximum population values in the data\r\n   const populationValues = data.map((item) => item.value);\r\n   const minPopulation = Math.min(...populationValues);\r\n   const maxPopulation = Math.max(...populationValues);\r\n\r\n   // Adjust the y-axis boundaries\r\n   const yAxisPadding = (maxPopulation - minPopulation) / 10;\r\n   setYAxisMin(minPopulation - yAxisPadding);\r\n   setYAxisMax(maxPopulation + yAxisPadding);\r\n\r\n\r\n  useEffect(() => {\r\n    // Check if a previous chart instance exists and destroy it\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country values\r\n\r\n      const datasets = countries.map((country, index) => ({\r\n        label: country,\r\n        data: data\r\n          .filter((item) => item.country.value === country)\r\n          .map((item) => ({\r\n            x: item.date,\r\n            y: item.value,\r\n          })),\r\n        borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`,\r\n        borderWidth: 2,\r\n        fill: false,\r\n      }));\r\n\r\n          \r\n      \r\n      \r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear, // Set the minimum year\r\n              max: maxYear, // Set the maximum year\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: yAxisMin, // Set the adjusted y-axis minimum\r\n              max: yAxisMax, // Set the adjusted y-axis maximum\r\n              beginAtZero: true,\r\n            },\r\n\r\n          },\r\n          plugins: {\r\n            zoom: {\r\n              zoom: {\r\n                enabled: true,\r\n                mode: 'xy',\r\n                speed: 0.05,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}