{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\";\nimport React from \"react\";\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  country: \"USA\",\n  year: \"2020\",\n  population: 331002651\n}, {\n  country: \"China\",\n  year: \"2020\",\n  population: 1444216107\n}, {\n  country: \"India\",\n  year: \"2020\",\n  population: 1380004385\n}, {\n  country: \"Brazil\",\n  year: \"2020\",\n  population: 212559417\n}, {\n  country: \"Russia\",\n  year: \"2020\",\n  population: 145934462\n}\n// Add more data for other countries...\n];\n\nconst CountryPopulationChart = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"country-population-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Population by Country Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      margin: {\n        top: 20,\n        right: 30,\n        left: 20,\n        bottom: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"year\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), data.map((entry, index) => /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"population\",\n        data: data.filter(item => item.country === entry.country),\n        name: entry.country,\n        stroke: `#${Math.floor(Math.random() * 16777215).toString(16)}` // Generate a random color\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_c = CountryPopulationChart;\nexport default CountryPopulationChart;\nvar _c;\n$RefreshReg$(_c, \"CountryPopulationChart\");","map":{"version":3,"names":["React","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","jsxDEV","_jsxDEV","data","country","year","population","CountryPopulationChart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","map","entry","index","type","filter","item","name","stroke","Math","floor","random","toString","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  {\r\n    country: \"USA\",\r\n    year: \"2020\",\r\n    population: 331002651,\r\n  },\r\n  {\r\n    country: \"China\",\r\n    year: \"2020\",\r\n    population: 1444216107,\r\n  },\r\n  {\r\n    country: \"India\",\r\n    year: \"2020\",\r\n    population: 1380004385,\r\n  },\r\n  {\r\n    country: \"Brazil\",\r\n    year: \"2020\",\r\n    population: 212559417,\r\n  },\r\n  {\r\n    country: \"Russia\",\r\n    year: \"2020\",\r\n    population: 145934462,\r\n  },\r\n  // Add more data for other countries...\r\n];\r\n\r\nconst CountryPopulationChart = () => {\r\n  return (\r\n    <div className=\"country-population-chart\">\r\n      <h2>Population by Country Over Time</h2>\r\n      <LineChart\r\n        width={800}\r\n        height={400}\r\n        data={data}\r\n        margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"year\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        {data.map((entry, index) => (\r\n          <Line\r\n            key={`line-${index}`}\r\n            type=\"monotone\"\r\n            dataKey=\"population\"\r\n            data={data.filter((item) => item.country === entry.country)}\r\n            name={entry.country}\r\n            stroke={`#${Math.floor(Math.random() * 16777215).toString(16)}`} // Generate a random color\r\n          />\r\n        ))}\r\n      </LineChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPopulationChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}