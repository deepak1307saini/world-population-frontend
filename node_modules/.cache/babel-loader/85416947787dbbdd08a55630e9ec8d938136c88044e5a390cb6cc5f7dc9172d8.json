{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    // Check if a previous chart instance exists and destroy it\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country names\n      const datasets = countries.map((country, index) => {\n        const countryData = data.filter(item => item.country.value === country);\n        return {\n          label: country,\n          data: countryData.map(item => item.value),\n          borderColor: getRandomColor(index),\n          // Generate a random color for each country\n          fill: false\n        };\n      });\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        // Use a line chart\n        data: {\n          labels: data.map(item => item.date),\n          datasets\n        },\n        options: {\n          responsive: true,\n          // Make the chart responsive\n          scales: {\n            x: {\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data]);\n\n  // Function to generate a random color\n  const getRandomColor = index => {\n    const colors = ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'\n    // Add more colors if needed\n    ];\n\n    return colors[index % colors.length];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","current","destroy","ctx","getContext","countries","Set","map","item","country","value","datasets","index","countryData","filter","label","borderColor","getRandomColor","fill","newChartInstance","type","labels","date","options","responsive","scales","x","beginAtZero","y","colors","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Check if a previous chart instance exists and destroy it\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country names\r\n      const datasets = countries.map((country, index) => {\r\n        const countryData = data.filter((item) => item.country.value === country);\r\n\r\n        return {\r\n          label: country,\r\n          data: countryData.map((item) => item.value),\r\n          borderColor: getRandomColor(index), // Generate a random color for each country\r\n          fill: false,\r\n        };\r\n      });\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line', // Use a line chart\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets,\r\n        },\r\n        options: {\r\n          responsive: true, // Make the chart responsive\r\n          scales: {\r\n            x: {\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data]);\r\n\r\n  // Function to generate a random color\r\n  const getRandomColor = (index) => {\r\n    const colors = [\r\n      'rgba(255, 99, 132, 1)',\r\n      'rgba(54, 162, 235, 1)',\r\n      'rgba(255, 206, 86, 1)',\r\n      'rgba(75, 192, 192, 1)',\r\n      'rgba(153, 102, 255, 1)',\r\n      'rgba(255, 159, 64, 1)',\r\n      // Add more colors if needed\r\n    ];\r\n    return colors[index % colors.length];\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}