{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [minPopulation, setMinPopulation] = useState(0);\n  const [maxPopulation, setMaxPopulation] = useState(0);\n  const updateChartSize = useCallback(() => {\n    setWindowWidth(window.innerWidth);\n    if (chartRef && chartRef.current) {\n      const parentWidth = chartRef.current.parentElement.clientWidth;\n      chartRef.current.width = parentWidth;\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.resize();\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country))];\n      const datasets = countries.map((country, index) => {\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country === country).map(item => ({\n            x: item.year,\n            y: item.population\n          })),\n          borderColor: color,\n          borderWidth: 1,\n          fill: false,\n          pointStyle: 'circle',\n          pointRadius: 2,\n          pointBorderColor: color\n        };\n      });\n      const minYear = Math.min(...data.map(item => item.year));\n      const maxYear = Math.max(...data.map(item => item.year));\n      const populationValues = data.map(item => item.population);\n      setMinPopulation(Math.min(...populationValues));\n      setMaxPopulation(Math.max(...populationValues));\n      const isSmallScreen = windowWidth <= 450;\n      const yTicks = {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Population'\n        }\n      };\n      if (isSmallScreen) {\n        // Format Y-axis ticks with exponential notation\n        yTicks.ticks = {\n          callback: function (value) {\n            return value.toExponential(2);\n          }\n        };\n      } else {\n        // Display Y-axis ticks as-is with two decimal places\n        yTicks.ticks = {\n          callback: function (value) {\n            return value.toFixed(2);\n          }\n        };\n      }\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          animationEnabled: true,\n          zoomEnabled: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              max: maxYear + 1,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Year'\n              }\n            },\n            y: {\n              type: 'linear',\n              min: minPopulation - minPopulation / 5,\n              max: maxPopulation + maxPopulation / 15,\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Population'\n              }\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n    }\n  }, [data, windowWidth]);\n  useEffect(() => {\n    window.addEventListener('resize', updateChartSize);\n    return () => {\n      window.removeEventListener('resize', updateChartSize);\n    };\n  }, [updateChartSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center\",\n      children: \"Population Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"MdEXWLdNgQXzO+KjeOc5SzfT+jQ=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","windowWidth","setWindowWidth","window","innerWidth","minPopulation","setMinPopulation","maxPopulation","setMaxPopulation","updateChartSize","current","parentWidth","parentElement","clientWidth","width","resize","destroy","ctx","getContext","countries","Set","map","item","country","datasets","index","color","Math","random","label","filter","x","year","y","population","borderColor","borderWidth","fill","pointStyle","pointRadius","pointBorderColor","minYear","min","maxYear","max","populationValues","isSmallScreen","yTicks","beginAtZero","title","display","text","ticks","callback","value","toExponential","toFixed","newChartInstance","type","labels","date","options","responsive","animationEnabled","zoomEnabled","scales","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  const [minPopulation, setMinPopulation] = useState(0);\r\n  const [maxPopulation, setMaxPopulation] = useState(0);\r\n\r\n  const updateChartSize = useCallback(() => {\r\n    setWindowWidth(window.innerWidth);\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const parentWidth = chartRef.current.parentElement.clientWidth;\r\n      chartRef.current.width = parentWidth;\r\n\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.resize();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country))];\r\n\r\n      const datasets = countries.map((country, index) => {\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country === country)\r\n            .map((item) => ({\r\n              x: item.year,\r\n              y: item.population,\r\n            })),\r\n          borderColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n          pointStyle: 'circle',\r\n          pointRadius: 2,\r\n          pointBorderColor: color,\r\n        };\r\n      });\r\n\r\n      const minYear = Math.min(...data.map((item) => item.year));\r\n      const maxYear = Math.max(...data.map((item) => item.year));\r\n\r\n      const populationValues = data.map((item) => item.population);\r\n      setMinPopulation(Math.min(...populationValues));\r\n      setMaxPopulation(Math.max(...populationValues));\r\n\r\n      const isSmallScreen = windowWidth <= 450;\r\n\r\n      const yTicks = {\r\n        beginAtZero: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Population',\r\n        },\r\n      };\r\n\r\n      if (isSmallScreen) {\r\n        // Format Y-axis ticks with exponential notation\r\n        yTicks.ticks = {\r\n          callback: function (value) {\r\n            return value.toExponential(2);\r\n          },\r\n        };\r\n      } else {\r\n        // Display Y-axis ticks as-is with two decimal places\r\n        yTicks.ticks = {\r\n          callback: function (value) {\r\n            return value.toFixed(2);\r\n          },\r\n        };\r\n      }\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          animationEnabled: true,\r\n          zoomEnabled: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear,\r\n              max: maxYear + 1,\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Year',\r\n              },\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: minPopulation - minPopulation / 5,\r\n              max: maxPopulation + maxPopulation / 15,\r\n              beginAtZero: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Population',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n  }, [data, windowWidth]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', updateChartSize);\r\n    return () => {\r\n      window.removeEventListener('resize', updateChartSize);\r\n    };\r\n  }, [updateChartSize]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h3 className=\"text-center\">Population Chart</h3>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}