{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const verticalLineRef = useRef(null);\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\n    }\n\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country values\n\n      const datasets = countries.map((country, index) => {\n        // Generate a unique color for each country\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country.value === country).map(item => ({\n            x: item.date,\n            y: item.value\n          })),\n          borderColor: color,\n          borderWidth: 1,\n          fill: false,\n          pointStyle: 'circle',\n          pointRadius: 2,\n          pointBorderColor: color\n        };\n      });\n\n      // Calculate the min and max year values\n      const minYear = Math.min(...data.map(item => item.date));\n      const maxYear = Math.max(...data.map(item => item.date));\n\n      // Find the minimum and maximum population values in the data\n      const populationValues = data.map(item => item.value);\n      const minPopulation = Math.min(...populationValues);\n      const maxPopulation = Math.max(...populationValues);\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          animationEnabled: true,\n          zoomEnabled: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              max: maxYear,\n              beginAtZero: true\n            },\n            y: {\n              type: 'linear',\n              min: minPopulation - minPopulation / 5,\n              max: maxPopulation,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'top'\n            },\n            tooltips: {\n              mode: 'index',\n              intersect: false\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = newChartInstance;\n\n      // Add a vertical line using a separate canvas element\n      if (verticalLineRef.current) {\n        const verticalCtx = verticalLineRef.current.getContext('2d');\n        verticalCtx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n        verticalCtx.lineWidth = 1;\n\n        // Calculate the x-coordinate of the vertical line based on a specific year (e.g., 1990)\n        const year = 1990; // You can adjust this year as needed\n        const xPosition = newChartInstance.scales.x.getPixelForValue(year);\n        verticalCtx.beginPath();\n        verticalCtx.moveTo(xPosition, 0);\n        verticalCtx.lineTo(xPosition, verticalLineRef.current.height);\n        verticalCtx.stroke();\n      }\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: verticalLineRef,\n          className: \"vertical-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"J9mhffqX1dNR+akvKgTmkKYzeLM=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","verticalLineRef","current","destroy","ctx","getContext","countries","Set","map","item","country","value","datasets","index","color","Math","random","label","filter","x","date","y","borderColor","borderWidth","fill","pointStyle","pointRadius","pointBorderColor","minYear","min","maxYear","max","populationValues","minPopulation","maxPopulation","newChartInstance","type","labels","options","responsive","animationEnabled","zoomEnabled","scales","beginAtZero","plugins","legend","display","position","tooltips","mode","intersect","verticalCtx","strokeStyle","lineWidth","year","xPosition","getPixelForValue","beginPath","moveTo","lineTo","height","stroke","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n  const verticalLineRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country values\r\n\r\n      const datasets = countries.map((country, index) => {\r\n        // Generate a unique color for each country\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country.value === country)\r\n            .map((item) => ({\r\n              x: item.date,\r\n              y: item.value,\r\n            })),\r\n          borderColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n          pointStyle: 'circle',\r\n          pointRadius: 2,\r\n          pointBorderColor: color,\r\n        };\r\n      });\r\n\r\n      // Calculate the min and max year values\r\n      const minYear = Math.min(...data.map((item) => item.date));\r\n      const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n      // Find the minimum and maximum population values in the data\r\n      const populationValues = data.map((item) => item.value);\r\n      const minPopulation = Math.min(...populationValues);\r\n      const maxPopulation = Math.max(...populationValues);\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          animationEnabled: true,\r\n          zoomEnabled: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear,\r\n              max: maxYear,\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: minPopulation - minPopulation / 5,\r\n              max: maxPopulation,\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: 'top',\r\n            },\r\n            tooltips: {\r\n              mode: 'index',\r\n              intersect: false,\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n\r\n      // Add a vertical line using a separate canvas element\r\n      if (verticalLineRef.current) {\r\n        const verticalCtx = verticalLineRef.current.getContext('2d');\r\n        verticalCtx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\r\n        verticalCtx.lineWidth = 1;\r\n\r\n        // Calculate the x-coordinate of the vertical line based on a specific year (e.g., 1990)\r\n        const year = 1990; // You can adjust this year as needed\r\n        const xPosition = newChartInstance.scales.x.getPixelForValue(year);\r\n\r\n        verticalCtx.beginPath();\r\n        verticalCtx.moveTo(xPosition, 0);\r\n        verticalCtx.lineTo(xPosition, verticalLineRef.current.height);\r\n        verticalCtx.stroke();\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n          <canvas ref={verticalLineRef} className=\"vertical-line\"></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}