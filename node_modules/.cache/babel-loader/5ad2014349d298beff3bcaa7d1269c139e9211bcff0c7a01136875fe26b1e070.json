{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deepak Saini\\\\Documents\\\\Full Stack\\\\React\\\\World-Population\\\\client\\\\src\\\\ChartSection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-plugin-annotation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartSection = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n\n  // Function to handle mouse move and draw vertical line\n  const handleMouseMove = event => {\n    if (event.nativeEvent) {\n      if (chartInstanceRef.current) {\n        const chartInstance = chartInstanceRef.current;\n        const ctx = chartInstance.ctx;\n\n        // Clear previous annotations\n        chartInstance.options.plugins.annotation.annotations = [];\n\n        // Get the x-axis value (year) at the mouse position\n        const xValue = chartInstance.scales.x.getValueForPixel(event.nativeEvent.offsetX);\n\n        // Draw a vertical line at the mouse position\n        chartInstance.options.plugins.annotation.annotations.push({\n          type: 'line',\n          mode: 'vertical',\n          scaleID: 'x',\n          value: xValue,\n          borderColor: 'rgba(0, 0, 0, 0.5)',\n          borderWidth: 1,\n          borderDash: [5, 5]\n        });\n        chartInstance.update();\n      }\n    }\n  };\n  useEffect(() => {\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\n    }\n\n    if (chartRef && chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n      const countries = [...new Set(data.map(item => item.country.value))]; // Get unique country values\n\n      const datasets = countries.map((country, index) => {\n        // Generate a unique color for each country\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\n        return {\n          label: country,\n          data: data.filter(item => item.country.value === country).map(item => ({\n            x: item.date,\n            y: item.value\n          })),\n          borderColor: color,\n          borderWidth: 1,\n          fill: false,\n          pointStyle: 'circle',\n          pointRadius: 2,\n          pointBorderColor: color\n        };\n      });\n\n      // Calculate the min and max year values\n      const minYear = Math.min(...data.map(item => item.date));\n      const maxYear = Math.max(...data.map(item => item.date));\n\n      // Find the minimum and maximum population values in the data\n      const populationValues = data.map(item => item.value);\n      const minPopulation = Math.min(...populationValues);\n      const maxPopulation = Math.max(...populationValues);\n      const newChartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: data.map(item => item.date),\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          animationEnabled: true,\n          zoomEnabled: true,\n          scales: {\n            x: {\n              type: 'linear',\n              min: minYear,\n              max: maxYear,\n              beginAtZero: true\n            },\n            y: {\n              type: 'linear',\n              min: minPopulation - minPopulation / 5,\n              max: maxPopulation,\n              beginAtZero: true\n            }\n          },\n          plugins: {\n            annotation: {\n              drawTime: 'beforeDatasetsDraw',\n              // Ensure that the annotation is drawn before datasets\n              annotations: [] // Initialize an empty array for annotations\n            }\n          }\n        }\n      });\n\n      chartInstanceRef.current = newChartInstance;\n    }\n\n    // Add event listener for mousemove when the component mounts\n    chartRef.current.addEventListener('mousemove', handleMouseMove);\n\n    // Remove event listener for mousemove when the component unmounts\n    return () => {\n      chartRef.current.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Chart Section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(ChartSection, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = ChartSection;\nexport default ChartSection;\nvar _c;\n$RefreshReg$(_c, \"ChartSection\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartSection","data","_s","chartRef","chartInstanceRef","handleMouseMove","event","nativeEvent","current","chartInstance","ctx","options","plugins","annotation","annotations","xValue","scales","x","getValueForPixel","offsetX","push","type","mode","scaleID","value","borderColor","borderWidth","borderDash","update","destroy","getContext","countries","Set","map","item","country","datasets","index","color","Math","random","label","filter","date","y","fill","pointStyle","pointRadius","pointBorderColor","minYear","min","maxYear","max","populationValues","minPopulation","maxPopulation","newChartInstance","labels","responsive","animationEnabled","zoomEnabled","beginAtZero","drawTime","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/Deepak Saini/Documents/Full Stack/React/World-Population/client/src/ChartSection.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chartjs-plugin-annotation';\r\n\r\nconst ChartSection = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  // Function to handle mouse move and draw vertical line\r\n  const handleMouseMove = (event) => {\r\n    if (event.nativeEvent) {\r\n      if (chartInstanceRef.current) {\r\n        const chartInstance = chartInstanceRef.current;\r\n        const ctx = chartInstance.ctx;\r\n\r\n        // Clear previous annotations\r\n        chartInstance.options.plugins.annotation.annotations = [];\r\n\r\n        // Get the x-axis value (year) at the mouse position\r\n        const xValue = chartInstance.scales.x.getValueForPixel(event.nativeEvent.offsetX);\r\n\r\n        // Draw a vertical line at the mouse position\r\n        chartInstance.options.plugins.annotation.annotations.push({\r\n          type: 'line',\r\n          mode: 'vertical',\r\n          scaleID: 'x',\r\n          value: xValue,\r\n          borderColor: 'rgba(0, 0, 0, 0.5)',\r\n          borderWidth: 1,\r\n          borderDash: [5, 5],\r\n        });\r\n\r\n        chartInstance.update();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy(); // Destroy the previous chart instance\r\n    }\r\n\r\n    if (chartRef && chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      const countries = [...new Set(data.map((item) => item.country.value))]; // Get unique country values\r\n\r\n      const datasets = countries.map((country, index) => {\r\n        // Generate a unique color for each country\r\n        const color = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`;\r\n\r\n        return {\r\n          label: country,\r\n          data: data\r\n            .filter((item) => item.country.value === country)\r\n            .map((item) => ({\r\n              x: item.date,\r\n              y: item.value,\r\n            })),\r\n          borderColor: color,\r\n          borderWidth: 1,\r\n          fill: false,\r\n          pointStyle: 'circle',\r\n          pointRadius: 2,\r\n          pointBorderColor: color,\r\n        };\r\n      });\r\n\r\n      // Calculate the min and max year values\r\n      const minYear = Math.min(...data.map((item) => item.date));\r\n      const maxYear = Math.max(...data.map((item) => item.date));\r\n\r\n      // Find the minimum and maximum population values in the data\r\n      const populationValues = data.map((item) => item.value);\r\n      const minPopulation = Math.min(...populationValues);\r\n      const maxPopulation = Math.max(...populationValues);\r\n\r\n      const newChartInstance = new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n          labels: data.map((item) => item.date),\r\n          datasets: datasets,\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          animationEnabled: true,\r\n          zoomEnabled: true,\r\n          scales: {\r\n            x: {\r\n              type: 'linear',\r\n              min: minYear,\r\n              max: maxYear,\r\n              beginAtZero: true,\r\n            },\r\n            y: {\r\n              type: 'linear',\r\n              min: minPopulation - minPopulation / 5,\r\n              max: maxPopulation,\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n          plugins: {\r\n            annotation: {\r\n              drawTime: 'beforeDatasetsDraw', // Ensure that the annotation is drawn before datasets\r\n              annotations: [], // Initialize an empty array for annotations\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      chartInstanceRef.current = newChartInstance;\r\n    }\r\n\r\n    // Add event listener for mousemove when the component mounts\r\n    chartRef.current.addEventListener('mousemove', handleMouseMove);\r\n\r\n    // Remove event listener for mousemove when the component unmounts\r\n    return () => {\r\n      chartRef.current.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center\">Chart Section</h2>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <canvas ref={chartRef}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartSection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}